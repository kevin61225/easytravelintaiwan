@{
    ViewBag.Title = "Google Map";
}

<style type="text/css">
    #map_canvas {
        height: 400px;
        width: 90%;
    }
</style>

<!--引入 Google API-->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.9&sensor=false"></script>

<script type="text/javascript">

    var mainIcon = {
        url: 'Icons/04.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    };

    /* 規劃 */
    var directionsService = new google.maps.DirectionsService();
    var start = "台北市介壽國中";
    var end = "台北市台北科技大學";
    var waypoints = "台北市台北車站,台北市國父紀念館";
    //規畫路徑呈現選項
    var rendererOptions = {
        suppressMarkers: true,
        draggable: true
    };
    directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);

    function init() {

        var mapDiv = document.getElementById('map_canvas');
        var map = new google.maps.Map(mapDiv, {
            center: new google.maps.LatLng(25.039941, 121.512812),
            zoom: 15,
            scaleControl: true,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        directionsDisplay.setMap(map);
        var distanceWidget = new DistanceWidget(map);

        google.maps.event.addListener(distanceWidget, 'distance_changed', function () {
            displayInfo(distanceWidget);
        });

        google.maps.event.addListener(distanceWidget, 'position_changed', function () {
            displayInfo(distanceWidget);
        });
    }

    function displayInfo(widget) {
        var info = document.getElementById('info');
        info.innerHTML = 'Position: ' + widget.get('position') + ', distance: ' +
          widget.get('distance');
    }

    //規畫路徑
    function calcRoute() {
        if (!waypoints) return;

        var arrPoint = waypoints.split(",");

        //經過地點
        var waypts = [];
        for (var i = 0; i < arrPoint.length; i++) {
            waypts.push({
                location: arrPoint[i],
                stopover: true
            });
        }

        //規畫路徑請求
        var request = {
            origin: start,
            destination: end,
            waypoints: waypts,
            optimizeWaypoints: true,
            travelMode: google.maps.DirectionsTravelMode.WALKING
        };

        directionsService.route(request, function (response, status) {
            //規畫路徑回傳結果
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(response);
            }
        });
        console.log("done!!");
    }

    function DistanceWidget(map) {
        this.set('map', map);
        this.set('position', map.getCenter());

        var marker = new google.maps.Marker({
            position: map.getCenter(),
            draggable: true,
            title: '移動我 !!',
            icon: mainIcon,
        });

        // Bind the marker map property to the DistanceWidget map property
        marker.bindTo('map', this);

        // Bind the marker position property to the DistanceWidget position
        // property
        marker.bindTo('position', this);

        // Create a new radius widget
        var radiusWidget = new RadiusWidget();

        // Bind the radiusWidget map to the DistanceWidget map
        radiusWidget.bindTo('map', this);

        // Bind the radiusWidget center to the DistanceWidget position
        radiusWidget.bindTo('center', this, 'position');

        // Bind to the radiusWidgets' distance property
        this.bindTo('distance', radiusWidget);

        // Bind to the radiusWidgets' bounds property
        this.bindTo('bounds', radiusWidget);

        //google.maps.event.addListener(marker, 'dragend', function () { alert(marker.getPosition()); });
    }
    DistanceWidget.prototype = new google.maps.MVCObject();

    function RadiusWidget() {
        var circle = new google.maps.Circle({
            strokeWeight: 2
        });

        // Set the distance property value, default to 20km.
        this.set('distance', 20);

        // Bind the RadiusWidget bounds property to the circle bounds property.
        this.bindTo('bounds', circle);

        // Bind the circle center to the RadiusWidget center property
        circle.bindTo('center', this);

        // Bind the circle map to the RadiusWidget map
        circle.bindTo('map', this);

        // Bind the circle radius property to the RadiusWidget radius property
        circle.bindTo('radius', this);

        RadiusWidget.prototype.center_changed = function () {
            var bounds = this.get('bounds');

            // Bounds might not always be set so check that it exists first.
            if (bounds) {
                var lng = bounds.getNorthEast().lng();

                // Put the sizer at center, right on the circle.
                var position = new google.maps.LatLng(this.get('center').lat(), lng);
                this.set('sizer_position', position);
            }
        };
    }
    RadiusWidget.prototype = new google.maps.MVCObject();

    /**
 * Update the radius when the distance has changed.
 */
    RadiusWidget.prototype.distance_changed = function () {
        this.set('radius', this.get('distance') * 1000);
    };
    RadiusWidget.prototype.addSizer_ = function () {
        var sizer = new google.maps.Marker({
            draggable: true,
            title: 'Drag me!'
        });

        sizer.bindTo('map', this);
        sizer.bindTo('position', this, 'sizer_position');
        console.log('a ha !!');
        var me = this;
        google.maps.event.addListener(sizer, 'drag', function () {
            // Set the circle distance (radius)
            me.setDistance();
        });
    };

    RadiusWidget.prototype.distanceBetweenPoints_ = function (p1, p2) {
        if (!p1 || !p2) {
            return 0;
        }

        var R = 6371; // Radius of the Earth in km
        var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;
        var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
          Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) *
          Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = R * c;
        return d;
    };


    /**
     * Set the distance of the circle based on the position of the sizer.
     */
    RadiusWidget.prototype.setDistance = function () {
        // As the sizer is being dragged, its position changes.  Because the
        // RadiusWidget's sizer_position is bound to the sizer's position, it will
        // change as well.
        var pos = this.get('sizer_position');
        var center = this.get('center');
        var distance = this.distanceBetweenPoints_(center, pos);

        // Set the distance property for any objects that are bound to it
        this.set('distance', distance);
    };

    google.maps.event.addDomListener(window, 'load', init);
    google.maps.event.addDomListener(window, 'load', calcRoute);
</script>


<div id="map_canvas" class="map_canvas" aria-setsize="500"></div>
<div id="info"></div>