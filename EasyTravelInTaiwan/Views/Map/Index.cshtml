@{
    ViewBag.Title = "Google Map";
}

<style type="text/css">
    .map_canvas {
        height: 400px;
        width: 90%;
    }

    /*	start styles for the ContextMenu	*/
    .context_menu {
        background-color: white;
        border: 1px solid gray;
    }

    .context_menu_item {
        padding: 3px 6px;
    }

        .context_menu_item:hover {
            background-color: #CCCCCC;
        }

    .context_menu_separator {
        background-color: gray;
        height: 1px;
        margin: 0;
        padding: 0;
    }

    #clearDirectionsItem, #getDirectionsItem {
        display: none;
    }
</style>

<link href="~/Content/ui.css" rel="stylesheet" />
<link href="~/Content/ui.progress-bar.css" rel="stylesheet" />

<!--引入 Google API-->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
<script src="~/scripts/jquery.blockUI.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.9&sensor=false"></script>
<script src="http://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places"></script>
<script src="~/scripts/jquery.ui.core.js"></script>
<script src="~/scripts/jquery.ui.widget.js"></script>
<script src="~/scripts/jquery.ui.progressbar.js"></script>
<script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>

<script src="~/scripts/ContextMenu.js"></script>
<script src="~/scripts/jquery.geocomplete.js"></script>
<script src="~/scripts/GoogleMapRightClick.js"></script>
<script src="~/scripts/jquery.ajax-progress.js"></script>
<script src="~/scripts/progress.js"></script>

@*<div id="Progress-container">
    <div id="progress_bar" class="ui-progress-bar ui-container">
        <div class="ui-progress" style="width: 79%;">
            <span class="ui-label" style="display: none;">資料讀取中 <b class="value">79%</b></span>
        </div>
        <!-- .ui-progress -->
    </div>
</div>*@

<input id="inputGeo" type="text" placeholder="Enter a place" maxlength="100" autocomplete="off" />
@*<input id="searchBtn" type="button" value="Search" class="btn" />*@

<div id="placeFilter" class="btn-group filterClass" data-toggle="buttons-checkbox">
    <button type="button" class="btn btn-primary " value="07">食物</button>
    <button type="button" class="btn btn-primary " value="06">旅館</button>
    <button type="button" class="btn btn-primary " value="10">風景</button>
</div>

<div class="row">
    <div class="span6">
        <div id="map_canvas" class="map_canvas" aria-setsize="500"></div>
    </div>
    <div class="row">
        <div class="span6">
            @Html.Action("TravelListPartial", "Map")
        </div>
        <div class="span6">
            @Html.Action("TravelListPlacePartial", "Map")
        </div>
    </div>
</div>
<br />

@*<form id="status">
    Latitude:  
    <input name="lat" type="text" value="">
    Longitude: 
    <input name="lng" type="text" value="">
    Address:   
    <input name="formatted_address" type="text" value="">
</form>*@


@*@using (Html.BeginForm("Index", "Map", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)

    <form id="myForm">
        <ul class="nav nav-pills nav-stacked" id="InputsWrapper">
        </ul>
        <p>
            <input type="submit" value="Create" class="btn btn-success" onclick="UploadTravelList()" />
        </p>
    </form>
}*@

<input type="button" class="btn btn-success" id="clickBtn" value="ConverToJson" />

<div id="info"></div>

<script type="text/javascript">

    $(window).on('unload', function () {
        //localStorage.clear();
    });

    $(window).on('beforeunload', function (e) {
        return '如果直接離開的話，尚未儲存的資訊將會被清除。';
    });


    $("#clickBtn").click(function () {
        var placeItems = [];
        $("#InputsWrapper").children().each(function () {
            var $this = $(this);
            var str = $(this).attr('id');
            var n = str.split("-");
            var item = { id: gmarkers[n[1]].gId, name: $this.children().html() };
            placeItems.push(item);
            console.log(gmarkers[n[1]]);
            console.log(JSON.stringify(placeItems));
        });

        $.ajax({
            type: "POST",
            url: "@Url.Action("PostPlace")",
            success: function (data) { console.log(data) },
            data: JSON.stringify(placeItems),
            contentType: 'application/json; charset=utf-8'
        });
    });

    var mainIcon = {
        url: 'Content/Icons/04.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    };

    var foodIcon = {
        url: 'Content/Icons/02.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    };

    var hotelIcon = {
        url: 'Content/Icons/01.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    };

    var hotelIcon11 = {
        url: 'Content/Icons/hotel11.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    }

    var hotelIcon12 = {
        url: 'Content/Icons/hotel12.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    }

    var hotelIcon13 = {
        url: 'Content/Icons/hotel13.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    }

    var hotelIcon14 = {
        url: 'Content/Icons/hotel14.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    }

    var viewIcon = {
        url: 'Content/Icons/03.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    };

    //$("#searchBtn").click(function () {
    //    $("#inputGeo").trigger("geocode");
    //});


    //// Hide the label at start
    //$('#progress_bar .ui-progress .ui-label').hide();
    //// Set initial value
    //$('#progress_bar .ui-progress').css('width', '50%');
    //// Simulate some progress
    //$('#progress_bar .ui-progress').animateProgress(50, function () {
    //});


    $("#inputGeo").geocomplete({
        map: ".map_canvas",
        location: new google.maps.LatLng(25.039941, 121.512812),
        mapOptions: {
            zoom: 15,
            center: new google.maps.LatLng(25.039941, 121.512812),
            scrollwheel: true,
            scaleControl: false,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        },
        markerOptions: {
            draggable: true,
            icon: mainIcon,
            visible: true,
            title: '移動我 !!'
        },
        details: "#status",
    })
    .bind("geocode:result", function (event, result) {
        console.log("Result: " + result.formatted_address);
    })
    .bind("geocode:error", function (event, status) {
        console.log("ERROR: " + status);
    })
    .bind("geocode:multiple", function (event, results) {
        console.log("Multiple: " + results.length + " results found");
    })
    .bind("geocode:dragged", function (event, latLng) {
        //$("input[name=lat]").val(latLng.lat());
        //$("input[name=lng]").val(latLng.lng());
    });

    $(".filterClass .btn").click(function (event) {
        boxclick($(this).hasClass("active"), $(this).val());
    });

    $(document).on('click', '#InputsWrapper li', function (e) {
        //if (e.button == 1) {
            var str = $(this).attr('id');
            var n = str.split("-");
            console.log(n[1]);
            console.log(e);
            google.maps.event.trigger(gmarkers[n[1]], "click");
        //}
        //else if (e.button == 2) {
        //    var str = $(this).attr('id');
        //    var n = str.split("-");
        //    console.log(e.button);
        //}
    });

    //$(document).on('click', '#InputsWrapper li', function (e) {
    //    if (e.button == 2) {
    //        var str = $(this).attr('id');
    //        var n = str.split("-");
    //        console.log(n[1]);
    //    }
    //});

    var gmap = $("#inputGeo").geocomplete("map");
    var gmarker = $("#inputGeo").geocomplete("marker");
    var infowindow = new google.maps.InfoWindow();
    var gmarkers = [];
    var contextMenu;
    var unloading = false;

    $.ready()
    {
        if (localStorage['json_array'] == null) {
            $.ajax({
                type: 'POST',
                url: '/Map/GetMap',
                dataType: 'json',
                cache: true,
                success: function (data) {
                    localStorage['json_array'] = JSON.stringify(data);
                    initialize(data);
                    //DisableBlockUI();
                },
                error: function () {
                    console.log('Load Error Occur !');
                },
                progress: function (e) {
                    if (e.lengthComputable) {
                        var pct = (e.loaded / e.total) * 100;
                        console.log(parseInt((e.loaded / e.total * 100), 10));
                    } else {
                        console.warn('Content Length not reported!');
                    }
                }
            });
        }
        else {

            var data = JSON.parse(localStorage['json_array']);
            initialize(data);
            $.unblockUI();
        }
    }
    function initialize(mapData) {

        ////google.maps.event.addListener(gmarker, 'dblclick', function () {
        ////    // When a user double clicks on the icon fit to the map to the bounds
        ////    gmap.fitBounds(distanceWidget.get('bounds'));
        ////    console.log("dbclick!!");
        ////});

        $.each(mapData, function (i, item) {
            setupLocationMarker(item);
        });

        InitRightClick();

        var distanceWidget = new DistanceWidget();

        //google.maps.event.addListener(gmarker, 'position_changed', function () {
        //    distanceWidget.set('position', gmarker.getPosition());
        //    displayInfo(distanceWidget);
        //});

        google.maps.event.addListener(distanceWidget, 'distance_changed', function () {
            displayInfo(distanceWidget);
        });

        google.maps.event.addListener(distanceWidget, 'position_changed', function () {
            displayInfo(distanceWidget);
        });

        console.log(gmarkers.length);
    }

    function setupLocationMarker(item) {

        var markerIcon;

        switch (item.pt) {
            case "06": //住宿
                switch (item.m_layer2) {
                    case "11":
                        markerIcon = hotelIcon11;
                        break;
                    case "12":
                        markerIcon = hotelIcon12;
                        break;
                    case "13":
                        markerIcon = hotelIcon13;
                        break;
                    case "14":
                        markerIcon = hotelIcon14;
                        break;
                }
                //markerIcon = hotelIcon;
                break;
            case "07":
                markerIcon = foodIcon;
                break;
            case "10":
                markerIcon = viewIcon;
                break;
            case "20":
                markerIcon = gasIcon;
                break;
            default:
                break;
        }

        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(item.Lat, item.Lng),
            map: gmap,
            title: item.pName,
            icon: markerIcon,
            visible: false,
            isChecked: false,
            gIndex: gmarkers.length,
            gId: item.sno
        });
        marker.category = item.pt;

        gmarkers.push(marker);

        // add a marker click event
        google.maps.event.addListener(marker, 'click', function () {
            infowindow.setContent(item.pName);
            infowindow.open(gmap, this);
        });

        google.maps.event.addListener(marker, 'rightclick', function () {
            google.maps.event.trigger(gmap, 'rightclick', this);
        });
    }

    // == shows all markers of a particular category, and ensures the checkbox is checked ==
    function show(category) {
        for (var i = 0; i < gmarkers.length; i++) {
            if (gmarkers[i].category == category) {
                gmarkers[i].setVisible(true);
            }
        }
        // == check the checkbox ==
        //document.getElementById(category + "box").checked = true;
    }

    // == hides all markers of a particular category, and ensures the checkbox is cleared ==
    function hide(category) {
        for (var i = 0; i < gmarkers.length; i++) {
            if (gmarkers[i].category == category && !gmarkers[i].isChecked) {
                gmarkers[i].setVisible(false);
            }
        }
        // == clear the checkbox ==
        //document.getElementById(category + "box").checked = false;
        // == close the info window, in case its open on a marker that we just hid
        infowindow.close();
    }

    function boxclick(isChecked, category) {
        if (!isChecked) {
            show(category);
        } else {
            hide(category);
        }
        // == rebuild the side bar
        //makeSidebar();
    }

    function displayInfo(widget) {
        var info = document.getElementById('info');
        info.innerHTML = 'Position: ' + widget.get('position') + ', distance: ' +
          widget.get('distance');
    }

    DistanceWidget.prototype = new google.maps.MVCObject();

    function DistanceWidget() {

        this.set('map', gmap);
        this.set('position', gmap.getCenter());

        // Bind the marker map property to the DistanceWidget map property
        gmarker.bindTo('map', this);

        // Bind the marker position property to the DistanceWidget position
        // property
        gmarker.bindTo('position', this);

        // Create a new radius widget
        var radiusWidget = new RadiusWidget();

        // Bind the radiusWidget map to the DistanceWidget map
        radiusWidget.bindTo('map', this);

        // Bind the radiusWidget center to the DistanceWidget position
        radiusWidget.bindTo('center', this, 'position');

        // Bind to the radiusWidgets' distance property
        this.bindTo('distance', radiusWidget);

        // Bind to the radiusWidgets' bounds property
        this.bindTo('bounds', radiusWidget);

        //var me = this;
        //google.maps.event.addListener(marker, 'dblclick', function () {
        //    // When a user double clicks on the icon fit to the map to the bounds
        //    map.fitBounds(me.get('bounds'));
        //});
    }

    function RadiusWidget() {
        var circle = new google.maps.Circle({
            strokeWeight: 2,
            clickable: true
        });

        google.maps.event.addListener(circle, 'click', function () {
            contextMenu.hide();
        });
        // Set the distance property value, default to 10km.
        this.set('distance', 10);

        // Bind the RadiusWidget bounds property to the circle bounds property.
        this.bindTo('bounds', circle);

        // Bind the circle center to the RadiusWidget center property
        circle.bindTo('center', this);

        // Bind the circle map to the RadiusWidget map
        circle.bindTo('map', this);

        // Bind the circle radius property to the RadiusWidget radius property
        circle.bindTo('radius', this);

        RadiusWidget.prototype.center_changed = function () {
            var bounds = this.get('bounds');

            // Bounds might not always be set so check that it exists first.
            if (bounds) {
                var lng = bounds.getNorthEast().lng();

                // Put the sizer at center, right on the circle.
                var position = new google.maps.LatLng(this.get('center').lat(), lng);
                this.set('sizer_position', position);
            }
        };
    }
    RadiusWidget.prototype = new google.maps.MVCObject();

    /**
 * Update the radius when the distance has changed.
 */
    RadiusWidget.prototype.distance_changed = function () {
        this.set('radius', this.get('distance') * 1000);
    };
    RadiusWidget.prototype.addSizer_ = function () {
        var sizer = new google.maps.Marker({
            draggable: true,
            title: 'Drag me!'
        });

        sizer.bindTo('map', this);
        sizer.bindTo('position', this, 'sizer_position');
        console.log('a ha !!');
        var me = this;
        google.maps.event.addListener(sizer, 'drag', function () {
            // Set the circle distance (radius)
            me.setDistance();
        });
    };

    RadiusWidget.prototype.distanceBetweenPoints_ = function (p1, p2) {
        if (!p1 || !p2) {
            return 0;
        }

        var R = 6371; // Radius of the Earth in km
        var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;
        var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
          Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) *
          Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = R * c;
        return d;
    };

    /**
     * Set the distance of the circle based on the position of the sizer.
     */
    RadiusWidget.prototype.setDistance = function () {
        // As the sizer is being dragged, its position changes.  Because the
        // RadiusWidget's sizer_position is bound to the sizer's position, it will
        // change as well.
        var pos = this.get('sizer_position');
        var center = this.get('center');
        var distance = this.distanceBetweenPoints_(center, pos);

        // Set the distance property for any objects that are bound to it
        this.set('distance', distance);

    };

    $.blockUI({
        message: $('<div id="progress_bar" class="ui-progress-bar ui-container"><div class="ui-progress" style="width: 70%;"><span class="ui-label" style="display: none;">資料讀取中... <b class="value">70%</b></span></div></div>'),
        css: {
            top: ($(window).height() - 240) / 2 + 'px',
            left: ($(window).width() - 240) / 2 + 'px',
            width: '240px',
            color: '#fff',
            background: 'none',
            border: '0px',
            opacity: .7
        }
    });
    $('#progress_bar .ui-progress .ui-label').hide();
    $('#progress_bar .ui-progress').css('width', '7%');
    var timer = 99;
    $('#progress_bar .ui-progress').animateProgress(timer, function () {
        setTimeout(function () {
            if (timer >= 100) {
                timer = 10;
            }
            $(this).animateProgress(timer, function () {
                //$('#main_content').slideDown();
            });
            timer += 10;
            console.log("in");
        }, 2000);
    });
    $(document).ajaxStop($.unblockUI);

    function UploadTravelList() {
        $.ajax({
            type: 'POST',
            url: '/Maps/Index',
            data: $('#InputsWrapper').serialize(),
            success: function (jsonResult) {
                console.log(jsonResult);
                //$('#searchResults').innerHtml(jsonResult);
            }
        });
    }
</script>
