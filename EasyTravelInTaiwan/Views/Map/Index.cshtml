@{
    ViewBag.Title = "Google Map";
}

<style type="text/css">
    .map_canvas {
        height: 400px;
        width: 90%;
    }

    /*	start styles for the ContextMenu	*/
    .context_menu {
        background-color: white;
        border: 1px solid gray;
    }

    .context_menu_item {
        padding: 3px 6px;
    }

        .context_menu_item:hover {
            background-color: #CCCCCC;
        }

    .context_menu_separator {
        background-color: gray;
        height: 1px;
        margin: 0;
        padding: 0;
    }

    #clearDirectionsItem, #getDirectionsItem {
        display: none;
    }
</style>


<!--引入 Google API-->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.9&sensor=false"></script>
<script src="http://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places"></script>
<script src="~/scripts/jquery.blockUI.js"></script>
<script src="~/scripts/ContextMenu.js"></script>
<script src="~/scripts/jquery.geocomplete.js"></script>
<script src="~/scripts/GoogleMapRightClick.js"></script>
<script type="text/javascript">

    function ClickFood() {
        alert(FoodCheckBox.checked);
    }
    function ClickHotel() {
        alert(HotelCheckBox.checked);
    }
    function ClickView() {
        alert(ViewCheckBox.checked);
    }

</script>
<input id="inputGeo" type="text" placeholder="Enter a place" maxlength="100" autocomplete="off" />
<input id="searchBtn" type="button" value="Search" class="btn" />

食物
@Html.CheckBox("FoodCheckBox", false, new { onclick = "boxclick(this, '07')" })
旅館
@Html.CheckBox("HotelCheckBox", false, new { onclick = "boxclick(this, '06')" })
風景
@Html.CheckBox("ViewCheckBox", false, new { onclick = "boxclick(this, '10')" })

<div id="map_canvas" class="map_canvas" aria-setsize="500"></div>
<br />

<form id="status">
    Latitude:  
    <input name="lat" type="text" value="">
    Longitude: 
    <input name="lng" type="text" value="">
    Address:   
    <input name="formatted_address" type="text" value="">
</form>

<div id="info"></div>

<ul class="nav nav-pills nav-stacked" id="InputsWrapper" >
</ul>

<script type="text/javascript">

    var mainIcon = {
        url: 'Content/Icons/04.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    };

    var foodIcon = {
        url: 'Content/Icons/02.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    };

    var hotelIcon = {
        url: 'Content/Icons/01.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    };

    var hotelIcon11 = {
        url: 'Content/Icons/hotel11.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    }

    var hotelIcon12 = {
        url: 'Content/Icons/hotel12.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    }

    var hotelIcon13 = {
        url: 'Content/Icons/hotel13.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    }

    var hotelIcon14 = {
        url: 'Content/Icons/hotel14.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    }

    var viewIcon = {
        url: 'Content/Icons/03.png',
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 38)
    };

    $("#inputGeo").geocomplete({
        map: ".map_canvas",
        location: new google.maps.LatLng(25.039941, 121.512812),
        mapOptions: {
            zoom: 15,
            center: new google.maps.LatLng(25.039941, 121.512812),
            scrollwheel: true,
            scaleControl: false,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        },
        markerOptions: {
            draggable: true,
            icon: mainIcon,
            visible: true,
            title: '移動我 !!'
        },
        details: "#status",
    })
    .bind("geocode:result", function (event, result) {
        console.log("Result: " + result.formatted_address);
    })
    .bind("geocode:error", function (event, status) {
        console.log("ERROR: " + status);
    })
    .bind("geocode:multiple", function (event, results) {
        console.log("Multiple: " + results.length + " results found");
    })
    .bind("geocode:dragged", function (event, latLng) {
        $("input[name=lat]").val(latLng.lat());
        $("input[name=lng]").val(latLng.lng());
    });

    $("#searchBtn").click(function () {
        $("#inputGeo").trigger("geocode");
    });

    var gmap = $("#inputGeo").geocomplete("map");
    var marker = $("#inputGeo").geocomplete("marker");
    var infowindow = new google.maps.InfoWindow();
    var gmarkers = [];

    $.getJSON("/Map/GetMap", initialize);

    function initialize(mapData) {

        $.each(mapData, function (i, item) {
            setupLocationMarker(item);
        });

        InitRightClick();
        console.log(gmarkers.length);
        //var distanceWidget = new DistanceWidget(gmap);

        //google.maps.event.addListener(marker, 'position_changed', function () {
        //    distanceWidget.set('position', marker.getPosition());
        //    displayInfo(distanceWidget);
        //});

        //google.maps.event.addListener(distanceWidget, 'distance_changed', function () {
        //    displayInfo(distanceWidget);
        //});

        //google.maps.event.addListener(distanceWidget, 'position_changed', function () {
        //    displayInfo(distanceWidget);
        //});

        //google.maps.event.addListener(marker, 'dblclick', function () {
        //    // When a user double clicks on the icon fit to the map to the bounds
        //    gmap.fitBounds(distanceWidget.get('bounds'));
        //    console.log("dbclick!!");
        //});
    }

    function setupLocationMarker(item) {

        var markerIcon;

        switch (item.pt) {
            case "06": //住宿
                switch (item.m_layer2) {
                    case "11":
                        markerIcon = hotelIcon11;
                        break;
                    case "12":
                        markerIcon = hotelIcon12;
                        break;
                    case "13":
                        markerIcon = hotelIcon13;
                        break;
                    case "14":
                        markerIcon = hotelIcon14;
                        break;
                }
                //markerIcon = hotelIcon;
                break;
            case "07":
                markerIcon = foodIcon;
                break;
            case "10":
                markerIcon = viewIcon;
                break;
            case "20":
                markerIcon = gasIcon;
                break;
            default:
                break;
        }

        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(item.Lat, item.Lng),
            map: gmap,
            title: item.pName,
            icon: markerIcon,
            visible: false,
            isChecked: false,
            gIndex: gmarkers.length
        });
        marker.category = item.pt;
        
        gmarkers.push(marker);

        // add a marker click event
        google.maps.event.addListener(marker, 'click', function () {
            infowindow.setContent(item.pName);
            infowindow.open(gmap, this);
        });

        google.maps.event.addListener(marker, 'rightclick', function () {
            google.maps.event.trigger(gmap, 'rightclick', this);
        });
    }

    // == shows all markers of a particular category, and ensures the checkbox is checked ==
    function show(category) {
        for (var i = 0; i < gmarkers.length; i++) {
            if (gmarkers[i].category == category) {
                gmarkers[i].setVisible(true);
            }
        }
        // == check the checkbox ==
        //document.getElementById(category + "box").checked = true;
    }

    // == hides all markers of a particular category, and ensures the checkbox is cleared ==
    function hide(category) {
        for (var i = 0; i < gmarkers.length; i++) {
            if (gmarkers[i].category == category && !gmarkers[i].isChecked) {
                gmarkers[i].setVisible(false);
            }
        }
        // == clear the checkbox ==
        //document.getElementById(category + "box").checked = false;
        // == close the info window, in case its open on a marker that we just hid
        infowindow.close();
    }

    function myclick(i) {
        google.maps.event.trigger(gmarkers[i], "click");
        console.log("triggered");
    }

    function boxclick(box, category) {
        if (box.checked) {
            show(category);
        } else {
            hide(category);
        }
        // == rebuild the side bar
        //makeSidebar();
    }

    function displayInfo(widget) {
        var info = document.getElementById('info');
        info.innerHTML = 'Position: ' + widget.get('position') + ', distance: ' +
          widget.get('distance');
    }

    //規畫路徑
    function calcRoute() {
        if (!waypoints) return;

        var arrPoint = waypoints.split(",");

        //經過地點
        var waypts = [];
        for (var i = 0; i < arrPoint.length; i++) {
            waypts.push({
                location: arrPoint[i],
                stopover: true
            });
        }

        //規畫路徑請求
        var request = {
            origin: start,
            destination: end,
            waypoints: waypts,
            optimizeWaypoints: true,
            travelMode: google.maps.DirectionsTravelMode.WALKING
        };

        directionsService.route(request, function (response, status) {
            //規畫路徑回傳結果
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(response);
            }
        });

    }

    function DistanceWidget(map) {
        this.set('map', map);
        this.set('position', map.getCenter());

        var marker = new google.maps.Marker({
            position: map.getCenter(),
            draggable: true,
            //title: '移動我 !!',
            icon: mainIcon,
            visible: false
        });

        // Bind the marker map property to the DistanceWidget map property
        marker.bindTo('map', this);

        // Bind the marker position property to the DistanceWidget position
        // property
        marker.bindTo('position', this);

        // Create a new radius widget
        var radiusWidget = new RadiusWidget();

        // Bind the radiusWidget map to the DistanceWidget map
        radiusWidget.bindTo('map', this);

        // Bind the radiusWidget center to the DistanceWidget position
        radiusWidget.bindTo('center', this, 'position');

        // Bind to the radiusWidgets' distance property
        this.bindTo('distance', radiusWidget);

        // Bind to the radiusWidgets' bounds property
        this.bindTo('bounds', radiusWidget);

        //var me = this;
        //google.maps.event.addListener(marker, 'dblclick', function () {
        //    // When a user double clicks on the icon fit to the map to the bounds
        //    map.fitBounds(me.get('bounds'));
        //});

        //google.maps.event.addListener(marker, 'dragend', function () { alert(marker.getPosition()); });
    }

    DistanceWidget.prototype = new google.maps.MVCObject();

    function RadiusWidget() {
        var circle = new google.maps.Circle({
            strokeWeight: 2
        });

        // Set the distance property value, default to 10km.
        this.set('distance', 10);

        // Bind the RadiusWidget bounds property to the circle bounds property.
        this.bindTo('bounds', circle);

        // Bind the circle center to the RadiusWidget center property
        circle.bindTo('center', this);

        // Bind the circle map to the RadiusWidget map
        circle.bindTo('map', this);

        // Bind the circle radius property to the RadiusWidget radius property
        circle.bindTo('radius', this);

        RadiusWidget.prototype.center_changed = function () {
            var bounds = this.get('bounds');

            // Bounds might not always be set so check that it exists first.
            if (bounds) {
                var lng = bounds.getNorthEast().lng();

                // Put the sizer at center, right on the circle.
                var position = new google.maps.LatLng(this.get('center').lat(), lng);
                this.set('sizer_position', position);
            }
        };
    }
    RadiusWidget.prototype = new google.maps.MVCObject();

    /**
 * Update the radius when the distance has changed.
 */
    RadiusWidget.prototype.distance_changed = function () {
        this.set('radius', this.get('distance') * 1000);
    };
    RadiusWidget.prototype.addSizer_ = function () {
        var sizer = new google.maps.Marker({
            draggable: true,
            title: 'Drag me!'
        });

        sizer.bindTo('map', this);
        sizer.bindTo('position', this, 'sizer_position');
        console.log('a ha !!');
        var me = this;
        google.maps.event.addListener(sizer, 'drag', function () {
            // Set the circle distance (radius)
            me.setDistance();
        });
    };

    RadiusWidget.prototype.distanceBetweenPoints_ = function (p1, p2) {
        if (!p1 || !p2) {
            return 0;
        }

        var R = 6371; // Radius of the Earth in km
        var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;
        var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
          Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) *
          Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = R * c;
        return d;
    };

    /**
     * Set the distance of the circle based on the position of the sizer.
     */
    RadiusWidget.prototype.setDistance = function () {
        // As the sizer is being dragged, its position changes.  Because the
        // RadiusWidget's sizer_position is bound to the sizer's position, it will
        // change as well.
        var pos = this.get('sizer_position');
        var center = this.get('center');
        var distance = this.distanceBetweenPoints_(center, pos);

        // Set the distance property for any objects that are bound to it
        this.set('distance', distance);

    };

    function DisableBlockUI() {
        $.unblockUI();
    }

    google.maps.event.addDomListener(window, 'load', initialize);
    google.maps.event.addDomListener(window, 'load', calcRoute);

    $.blockUI({
        message: $('<h5 style="text-align:center font-size= 24px"><img src="Content/Icons/loader-indic.gif" /> <br/><br/>系統資料讀取中，請稍後 ...</h5>'),
        css: {
            top: ($(window).height() - 240) / 2 + 'px',
            left: ($(window).width() - 240) / 2 + 'px',
            width: '240px',
            color: '#fff',
            background: 'none',
            border: '0px',
            opacity: .7
        }
    });

    $(document).ajaxStop($.unblockUI);

</script>


